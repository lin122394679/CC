使用PHP开发应用程序，尤其是网站程序，常常需要生成随机密码，如用户注册生成随机密码，用户重置密码也需要生成一个随机的密码。随机密码也就是一串固定长度的字符串，这里我收集整理了几种生成随机字符串的方法，以供大家参考。
方法一：
1、在 33 – 126 中生成一个随机整数，如 35，
2、将 35 转换成对应的ASCII码字符，如 35 对应 #
3、重复以上 1、2 步骤 n 次，连接成 n 位的密码
该算法主要用到了两个函数，mt_rand ( int $min , int $max )函数用于生成随机整数，其中 $min – $max 为 ASCII 码的范围，这里取 33 -126 ，可以根据需要调整范围，如ASCII码表中 97 – 122 位对应 a – z 的英文字母，具体可参考 ASCII码表； chr ( int $ascii )函数用于将对应整数 $ascii 转换成对应的字符。
function create_password($pw_length = 8){ 
    $randpwd = ''; 
    for ($i = 0; $i < $pw_length; $i++){ 
        $randpwd .= chr(mt_rand(33, 126)); 
    } 
    return $randpwd; 
} 
// 调用该函数，传递长度参数$pw_length = 6 
//echo create_password(6); 

方法二：
1、预置一个的字符串 $chars ，包括 a – z，A – Z，0 – 9，以及一些特殊字符
2、在 $chars 字符串中随机取一个字符
3、重复第二步 n 次，可得长度为 n 的密码
function generate_password( $length = 8 ) { 
    // 密码字符集，可任意添加你需要的字符 
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 
!@#$%^&*()-_ []{}<>~`+=,.;:/?|'; 
    $password = ''; 
    for ( $i = 0; $i < $length; $i++ ){ 
        // 这里提供两种字符获取方式 
        // 第一种是使用 substr 截取$chars中的任意一位字符； 
        // 第二种是取字符数组 $chars 的任意元素 
        // $password .= substr($chars, mt_rand(0, strlen($chars) - 1), 1); 
        $password .= $chars[ mt_rand(0, strlen($chars) - 1) ]; 
    } 
    return $password; 
} 
echo generate_password(6); 

方法三：
算法简单，代码简短，只是因为md5()函数的返回值的缘故，生成的密码只包括字母和数字，不过也算是一个不错的方法。算法思想：
1、time() 获取当前的 Unix 时间戳
2、将第一步获取的时间戳进行 md5() 加密
3、将第二步加密的结果，截取 n 位即得想要的密码
function get_password( $length = 8 ) 
{ 
    $str = substr(md5(time()), 0, 6); 
    return $str; 
} 
echo get_password(6); 

时间效率对比
我们使用以下PHP代码，计算上面的 3 个随机密码生成函数生成 6 位密码的运行时间，进而对他们的时间效率进行一个简单的对比。
function getmicrotime(){ 
    list($usec, $sec) = explode(" ",microtime()); 
    return ((float)$usec + (float)$sec); 
} 
  
// 记录开始时间 
$time_start = getmicrotime(); 
     
// 这里放要执行的PHP代码，如: 
// echo create_password(6); 
  
// 记录结束时间 
$time_end = getmicrotime(); 
$time = $time_end - $time_start; 
 
 // 输出运行总时间  
echo "执行时间 $time seconds"; 
最终得出的结果是：
方法一：9.8943710327148E-5 秒
方法二：9.6797943115234E-5 秒
方法三：3.4093856811523E-5 秒
可以看出方法一和方法二的执行时间都差不多，方法四运行时间最短。
原文还提供了一种方法，但运行效率不如前三种方法，原文地址：http://www.ludou.org/how-to-create-a-password-generator-using-php.html

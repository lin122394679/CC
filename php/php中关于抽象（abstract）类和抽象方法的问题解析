在面向对象（OOP）语言中，一个类可以有一个或多个子类，而每个类都有至少一个公有方法作为外部代码访问的接口。而抽象方法就是为了方便继承而引入的，现在来看一下抽象方法和抽象类分别是如何定义以及他们的特点。
什么是抽象方法？
我们在类里面定义的只有方法名没有方法体的方法就是抽象方法，所谓没有方法体就是在方法声明的时候没有大括号以及其中的内容，而是直接声明时在方法名后加上分号结束，另外在声明抽象方法时还要加一个关键字"abstract"来修饰。
关于抽象方法的声明如下：
<?php
abstract function fun1();
什么是抽象类呢？
只要一个类里面有一个方法是抽象方法，那么这个类就必须定义为抽象类。抽象类也要使用关键字"abstract"来修饰，抽象类不能实例化对象，所以抽象方法作为子类方法重载的模板使用的，且要把继承的抽象类里的方法都实现。
关于抽象类以及抽象类的实现举例如下：
<?php
abstract class User{  //定义抽象类
    abstract protected function getUser(); //定义抽象方法
    public function print_content(){
        print $this->getUser();
    }
}

class vipUser extends User{
    protected function getUser(){
        return "抽象类与抽象方法";
    }
}

$user=new vipUser(); //实例化子类
$user->print_content(); //抽象类与抽象方法
?>
注意：抽象类继承另外一个抽象类时（目的是对该抽象类的扩展），不能重写父类的抽象方法。
在PHP5.1中，抽象类中支持静态抽象方法。下面这个例子，看到静态抽象方法可以声明。实现这个方法时，必须是静态的方法。
<?php
abstract class User{
	protected static  $sal=0;
	static abstract function getSal();
	static abstract function setSal($sal); 
}
class VipUser extends User{
	static function getSal(){
		return self::$sal;
	}
	static function setSal($sal){
		self::$sal=$sal;
	}
}
VipUser::setSal(100);
echo "you sal is " . VipUser::getSal();
?>


php学习笔记
Resource资源类型
资源resource是一种特殊变量，保存到了外部资源的一个引用。资源是通过专门的函数来建立和使用的。
转换为资源
由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。

释放资源
引用计数系统是Zend引擎的一部分，可以自动检测到一个资源不再被引用了（和Java一样）。这种情况下此资源使用的所有外部资源都会被垃圾回收系统释放。因此，很少需要手工释放内存。

class
每个类的定义都以关键字class开头，后面跟着一对花括号，里面包含有类的属性与方法的定义。
类名可以是任何非PHP保留字的合法标签。一个合法类名以字母或下划线开头，后面跟着若干字母，数字或下划线。以正则表达式表示为：[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*。

属性
类的变量成员叫做属性，或者字段、特征，此处统一称为“属性”。属性声明是由关键字public、protected或者private开头，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但是初始化的值必须是常熟，这里的常数是指PHP脚本在编译阶段时就可以得到其值，而不依赖于运行时的信息才能求值。

访问控制（可见性）
对属性或方法的访问控制 ，是通过在前面添加关键字public（公有），protected（受保护）或private（私有）来实现的。被定义为公有的类成员可以在任何地方被访问。被定义为受保护的类成员则可以被其自身以及其子类和父类访问。被定义为私有的类成员则只能被其定义所在的类访问。



类的自动加载
在编写面向对象（OOP）程序时，很多开发者为每个类新建一个PHP文件。这会带来一个烦恼：每个脚本的开头，都需要包含（include）一个长长的列表（每个类都有个文件）。

在PHP5中，已经不再需要这样了。spl_autoload_register()函数可以注册任意数量的自动加载器，当使用尚未被定义的类（class）和接口（interface）时自动去加载。通过注册自动加载器，脚本引擎在PHP出错失败前有了最后一个机会加载所需的类。
Tip尽管__autoload（）函数也能自动加载类和接口，但更建议使用spl_autoload_register（）函数。
spl_autoload_register()提供了一种更加灵活的方式来实现类的自动加载（同一个应用中，可以支持任意数量的加载器，比如第三方库中的）。因此，不再建议使用__autoload()函数，在以后的版本中它可能被弃用。

Note：
在PHP5.3之前，__autoload函数抛出的异常不能被catch语句块捕获并会导致一个致命错误（Fatal Error）。自PHP5.3起，能够thrown自定义的异常（Exception），随后自定义异常类即可使用。__autoload函数可以递归的自动加载自定义异常类。

抽象类
PHP 5 支持抽象类和抽象方法。定义为抽象的类不能被实例化。任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。
继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。此外方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。 这也适用于 PHP 5.4 起的构造函数。在 PHP 5.4 之前的构造函数声明可以不一样的。

对象接口
使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。
接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。
接口中定义的所有方法都必须是公有，这是接口的特性。

实现（implements）
要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。

Note:
实现多个接口时，接口中的方法不能有重名。
Note:
接口也可以继承，通过使用 extends 操作符。
Note:
类要实现接口，必须使用和接口中所定义的方法完全一致的方式。否则会导致致命错误。